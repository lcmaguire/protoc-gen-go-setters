// Code generated by protoc-gen-go-setters. DO NOT EDIT.
// source: example/example.proto
package example

import (
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// SetName will take set Example.Name to input and return Example.
func (x *Example) SetName(in string) *Example {
	x.Name = in
	return x
}

// SetCount will take set Example.Count to input and return Example.
func (x *Example) SetCount(in int32) *Example {
	x.Count = in
	return x
}

// SetActive will take set Example.Active to input and return Example.
func (x *Example) SetActive(in bool) *Example {
	x.Active = in
	return x
}

// SetTags will take set Example.Tags to input and return Example.
func (x *Example) SetTags(in []string) *Example {
	x.Tags = in
	return x
}

// AppendTags will append all input values to Example.Tags  and return Example.
func (x *Example) AppendTags(in ...string) *Example {
	x.Tags = append(x.Tags, in...)
	return x
}

// SetFoo will take set Example.Foo to input and return Example.
func (x *Example) SetFoo(in *Foo) *Example {
	x.Foo = in
	return x
}

// SetBar will take set Example.Bar to input and return Example.
func (x *Example) SetBar(in *Example_Bar) *Example {
	x.Bar = in
	return x
}

// SetAny will take set Example.Any to input and return Example.
func (x *Example) SetAny(in *anypb.Any) *Example {
	x.Any = in
	return x
}

// SetData will take set Example.Data to input and return Example.
func (x *Example) SetData(in Data) *Example {
	x.Data = in
	return x
}

// SetExtraComments will take set Example.ExtraComments to input and return Example.
func (x *Example) SetExtraComments(in *string) *Example {
	x.ExtraComments = in
	return x
}

// SetFooMap will take set Example.FooMap to input and return Example.
func (x *Example) SetFooMap(in map[string]*Foo) *Example {
	x.FooMap = in
	return x
}

// SetFooMapKey will set the value in the map for that key and return Example.
func (x *Example) SetFooMapKey(key string, val *Foo) *Example {
	x.FooMap[key] = val
	return x
}

// SetSample will take set Example.Sample to input and return Example.
func (x *Example) SetSample(in *SampleMessage) *Example {
	x.Sample = in
	return x
}

// SetCount will take set Foo.Count to input and return Foo.
func (x *Foo) SetCount(in int64) *Foo {
	x.Count = in
	return x
}

// SetCount will take set Funk.Count to input and return Funk.
func (x *Funk) SetCount(in int64) *Funk {
	x.Count = in
	return x
}

// SetName will take set SampleMessage.Name to input and return SampleMessage.
func (x *SampleMessage) SetName(in string) *SampleMessage {
	x.TestOneof = &SampleMessage_Name{Name: in}
	return x
}

// SetFoo will take set SampleMessage.Foo to input and return SampleMessage.
func (x *SampleMessage) SetFoo(in *Foo) *SampleMessage {
	x.TestOneof = &SampleMessage_Foo{Foo: in}
	return x
}

// SetFunk will take set SampleMessage.Funk to input and return SampleMessage.
func (x *SampleMessage) SetFunk(in *Funk) *SampleMessage {
	x.TestOneof = &SampleMessage_Funk{Funk: in}
	return x
}

// SetActive will take set SampleMessage.Active to input and return SampleMessage.
func (x *SampleMessage) SetActive(in bool) *SampleMessage {
	x.Active = in
	return x
}
